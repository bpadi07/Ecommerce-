// oauth-module.ts
import axios, { AxiosResponse } from "axios";
import { getUrlParameter, generateCodeChallenge, generateCodeVerifier, handleError } from "./oauth-utility"
import { OAuthModuleConfig } from "config/oauth-config";

/**
 * OAuthModule handles OAuth flows and token management.
 */
class OAuthModule {
    private static instance: OAuthModule | null = null;

    private clientId: string = "";
    private redirectUri: string = "";
    private authorizationUrl: string = "";
    private logoutUrl: string = "";
    private tokenUrl: string = "";
    private scope: string[] = [];
    private codeVerifier: string = "";
    private postLogoutRedirectUri: string = "";

    private constructor(config: OAuthModuleConfig) {
        this.initialize(config);
    }

    /**
     * Get an instance of OAuthModule.
     * @param config - Configuration options for OAuthModule.
     * @returns An instance of OAuthModule.
     */
    public static getInstance(config: OAuthModuleConfig): OAuthModule {
        if (!OAuthModule.instance) {
            OAuthModule.instance = new OAuthModule(config);
        }
        return OAuthModule.instance;
    }

    /**
     * Initialize OAuthModule with configuration options.
     * @param config - Configuration options for OAuthModule.
     */
    public initialize(config: OAuthModuleConfig): void {
        Object.assign(this, config);
        this.scope = Array.isArray(config.scope) ? config.scope : [config.scope];
    }

    /**
     * Get the authorization URL for initiating OAuth flow.
     */
    public async getAuthorizationUrl(): Promise<void> {
        this.codeVerifier = sessionStorage.getItem('codeVerifier') || generateCodeVerifier();

        try {
            if (getUrlParameter("error")) {
                throw new Error(`Код авторизации отсутствует.\nОшибка: ${getUrlParameter("error")}`);
            }

            if (!getUrlParameter("code") && !localStorage.getItem('token')) {
                sessionStorage.setItem('codeVerifier', this.codeVerifier);
                const authUrl = new URL(this.authorizationUrl);

                authUrl.searchParams.set('client_id', this.clientId);
                authUrl.searchParams.set('response_type', 'code');
                authUrl.searchParams.set('scope', this.scope.join(' '));
                authUrl.searchParams.set('redirect_uri', this.redirectUri);
                authUrl.searchParams.set('code_challenge', generateCodeChallenge(this.codeVerifier));
                authUrl.searchParams.set('code_challenge_method', 'S256');

                window.location.href = authUrl.toString();
            }
        } catch (error) {
            handleError(error, 'Ошибка получения URL авторизации');
        }
    }

    /**
     * Exchange authorization code for an access token.
     */
    public async exchangeCodeForToken(): Promise<void> {
        try {
            const authorizationCode = getUrlParameter("code");

            if (!authorizationCode) {
                return;
            }


            const params = new URLSearchParams({
                client_id: this.clientId,
                grant_type: 'authorization_code',
                code_verifier: this.codeVerifier,
                redirect_uri: this.redirectUri,
                code: authorizationCode,
                scope: this.scope.join(' '),
            });

            const { data }: AxiosResponse = await axios.post(this.tokenUrl, params);
            sessionStorage.removeItem('codeVerifier');
            localStorage.setItem('token', JSON.stringify(data));
            localStorage.setItem('tokenExpiration', (Date.now() + data.expires_in * 1000).toString());
        } catch (error) {
            handleError(error, 'Ошибка обмена кода на токен');
        }
    }


    /**
     * Log out and clear user's session.
     */
    public async logout(): Promise<void> {
        const token = JSON.parse(localStorage.getItem('token') || '{}').access_token;

        try {
            if (!token) {
                throw new Error('Токен доступа не найден. Невозможно выполнить выход.');
            }

            sessionStorage.removeItem('codeVerifier');
            localStorage.removeItem('token');
            window.location.href = `${this.logoutUrl}?redirectUrl=${this.postLogoutRedirectUri}`;
        } catch (error) {
            handleError(error, 'Ошибка выхода из системы');
        }
    }

    /**
     * Check if the stored token has expired.
     * @returns True if the token is expired, false otherwise.
     */
    public isTokenExpired(): boolean {
        return parseInt(localStorage.getItem('tokenExpiration') || '0', 10) < Date.now();
    }

    /**
     * Reauthenticate by clearing the stored token and initiating the authorization flow.
     */
    public async reauthenticate(): Promise<void> {
        localStorage.removeItem('token');
        await this.getAuthorizationUrl();
    }

}

export { OAuthModule, OAuthModuleConfig };
