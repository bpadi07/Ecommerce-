// oauth-utility.ts
import { enc, lib, SHA256 } from "crypto-js";

/**
 * Generates a code challenge based on the provided code verifier.
 * @param codeVerifier The code verifier to generate a challenge for.
 * @returns The generated code challenge.
 */
export function generateCodeChallenge(codeVerifier: string): string {
    const hashed = SHA256(codeVerifier);
    return base64URL(hashed);
}

/**
 * Generates a random code verifier.
 * @returns The generated code verifier.
 */
export function generateCodeVerifier(): string {
    const randBytes = new Uint8Array(32);
    crypto.getRandomValues(randBytes);
    return arrayBufferToBase64(randBytes);
}

// Other utility functions

/**
 * Converts an array buffer to a base64-encoded string.
 * @param buffer The array buffer to convert.
 * @returns The base64-encoded string.
 */
export function arrayBufferToBase64(buffer: Uint8Array): string {
    return btoa(String.fromCharCode.apply(null, Array.from(buffer)))
        .replace(/\+/g, '-')
        .replace(/\//g, '_')
        .replace(/=+$/, '');
}

/**
 * Converts a CryptoJS WordArray to a base64-encoded string with URL-safe characters.
 * @param string The CryptoJS WordArray to convert.
 * @returns The base64-encoded string with URL-safe characters.
 */
export function base64URL(string: lib.WordArray): string {
    return string.toString(enc.Base64).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
}

/**
 * Get the value of a URL parameter.
 * @param name - Name of the parameter.
 * @returns The value of the parameter.
 */
export function getUrlParameter(name: string): string {
    const regex = new RegExp(`[?&]${name}=([^&#]*)`);
    const results = regex.exec(window.location.search);
    return results ? decodeURIComponent(results[1].replace(/\+/g, " ")) : "";
}

/**
 * Handle errors by logging and potentially displaying user-friendly messages.
 * @param error - The error to handle.
 * @param message - A user-friendly error message.
 */
export function handleError(error: any, message: string): void {
    console.error(message, error);
    // Display a user-friendly message using alert
    window.alert(`Произошла ошибка: ${message}. Пожалуйста, обратитесь к администратору системы.`);
}
